esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}
#  platformio_options:
#    board_build.f_cpu: 120000000L
#    board_build.f_cpu: 240000000L

substitutions:
  name: bt-sunster_ble
  friendly_name: Diesel Air Heater

esp32_ble_tracker:

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: 

ota:
  platform: esphome
  password:

# Web Server
# if you use home assistant and have frequent disconnections. disable the web_server
web_server:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "SunsterBLE Hotspot"
    password: "12345678"

interval:
#  - interval: 300000ms #5minuti
  - interval: 13s
    id: intervallo
    then:
      - ble_client.ble_write:
          service_uuid: 0000ffe0-0000-1000-8000-00805f9b34fb
          characteristic_uuid: 0000ffe1-0000-1000-8000-00805f9b34fb
          value: [0xaa, 0x55, 0x0c, 0x22, 0x01, 0x00, 0x00, 0x2f]

ble_client:
  - mac_address:  # change to your mac address
    id: heater_ble

# Global variables
globals:
  - id: current_mode
    type: int
    initial_value: '1'  # 1 for LEVEL, 2 for AUTOMATIC

text_sensor:
  - platform: template
    name: "Glow Plug Status"
    id: Glowplug_status
    icon: "mdi:induction"
  - platform: template
    name: "Heater Mode"
    id: Burner_Mode

binary_sensor:
  - platform: template
    name: "Heater Status"
    id: Burner_status


# Sensors for status reporting
sensor:
  - platform: uptime
    name: Uptime Sensor

  - platform: template
    name: "Error Code"
    id: Error_Code
    accuracy_decimals: 0 

  - platform: template
    name: "Battery Voltage"
    id: Battery_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 2
    device_class: voltage
    icon: "mdi:car-battery"

  - platform: template
    name: "Sea Level"
    unit_of_measurement: 'm'
    id: altitude
    device_class: distance
    accuracy_decimals: 0
    icon: "mdi:summit"
    
  - platform: template
    name: "Power Status"
    id: Power_status
    accuracy_decimals: 0
    icon: "mdi:speedometer"

  - platform: template
    name: "Fan Speed"
    id: fan_speed
    accuracy_decimals: 0
    icon: "mdi:fan"

  - platform: template
    name: "Room Temperature"
    id: room_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:home-thermometer"

  - platform: template
    name: "Heating Temperature"
    id: heating_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:radiator"

  - platform: ble_client
    type: characteristic
    id: my_ble_sensor
    ble_client_id: heater_ble
    service_uuid: "0000ffe0-0000-1000-8000-00805f9b34fb"
    characteristic_uuid: "0000ffe1-0000-1000-8000-00805f9b34fb"
    name: "BLE Raw Data"
    notify: true
    lambda: |-
      
      static const char* const states[] = {"Warmup", "Self test running", "Ignition", "Heating", "Shutting down"};

      if (x[0] == 170) {
        ESP_LOGD("BLE", "Received data: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X ",
                  x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19]);

        id(heating_temperature).publish_state((uint8_t)x[13]);
        id(Burner_Mode).publish_state(x[8] == 2 ? "Automatic" : "Level");
        id(Burner_status).publish_state(x[3] > 0);
        
        // Set States
        if (x[5] < sizeof(states)/sizeof(states[0])) {
          id(Glowplug_status).publish_state(states[x[5]]);
        } else {
          ESP_LOGD("Error", "Received state does not match known possible states: %02d", x[5]);
        }
        
        id(Power_status).publish_state(x[9]);
        id(Error_Code).publish_state(x[17]);
        id(altitude).publish_state(((x[7])<<8)|x[6]);
        id(room_temperature).publish_state((int16_t)(((uint8_t)x[16])<<8)|((uint8_t)x[15]));
        id(Battery_voltage).publish_state((x[11])/10.0);

        if (id(Glowplug_status).state == "Warmup" && id(Burner_status).state == 0) {
          id(fan_speed).publish_state(0);
        } else {
          id(fan_speed).publish_state(x[10]+1);
        }
      }
      return 0;
     
# Switches
switch:
  - platform: template
    name: "Heater Power"
    id: heater_power
    icon: "mdi:radiator"
    optimistic: true
    turn_on_action:
      - ble_client.ble_write:
          service_uuid: '0000FFE0-0000-1000-8000-00805F9B34FB'
          characteristic_uuid: '0000FFE1-0000-1000-8000-00805F9B34FB'
          value: [0xAA, 0x55, 0x0C, 0x22, 0x03, 0x01, 0x00, 0x32] #ON
      - lambda: |-
          intervallo->set_update_interval(3000);
          intervallo->call_setup();

    turn_off_action:
      - ble_client.ble_write:
          service_uuid: '0000FFE0-0000-1000-8000-00805F9B34FB'
          characteristic_uuid: '0000FFE1-0000-1000-8000-00805F9B34FB'
          value: [0xAA, 0x55, 0x0C, 0x22, 0x03, 0x00, 0x00, 0x31] #OFF
      - lambda: |-
          intervallo->set_update_interval(300000);
          intervallo->call_setup();
          id(fan_speed).publish_state(0);

# Select for mode
select:
  - platform: template
    name: "Heater Mode"
    id: heater_mode
    options:
      - "Level"
      - "Automatic"
    initial_option: "Level"
    optimistic: true
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(heater_mode).state == "Level";'
            then:
              - lambda: 'id(current_mode) = 1;'
              - ble_client.ble_write:
                  service_uuid: '0000FFE0-0000-1000-8000-00805F9B34FB'
                  characteristic_uuid: '0000FFE1-0000-1000-8000-00805F9B34FB'
                  value: [0xAA, 0x55, 0x0C, 0x22, 0x02, 0x01, 0x00, 0x31]
            else:
              - lambda: 'id(current_mode) = 2;'
              - ble_client.ble_write:
                  service_uuid: '0000FFE0-0000-1000-8000-00805F9B34FB'
                  characteristic_uuid: '0000FFE1-0000-1000-8000-00805F9B34FB'
                  value: [0xAA, 0x55, 0x0C, 0x22, 0x02, 0x02, 0x00, 0x32]


number:
  - platform: template
    name: "Heater Temperature"
    id: heater_temperature
    min_value: 8
    max_value: 36
    step: 1
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    optimistic: true
    set_action:
      then:

        - ble_client.ble_write:
             service_uuid: '0000FFE0-0000-1000-8000-00805F9B34FB'
             characteristic_uuid: '0000FFE1-0000-1000-8000-00805F9B34FB'
             value: [0xAA, 0x55, 0x0C, 0x22, 0x02, 0x02, 0x00, 0x32]

        - delay: 1s

        # Dynamic sending of the second BLE command
        - ble_client.ble_write:
            service_uuid: '0000FFE0-0000-1000-8000-00805F9B34FB'
            characteristic_uuid: '0000FFE1-0000-1000-8000-00805F9B34FB'
            value: !lambda |-
              uint8_t temp = (uint8_t)id(heater_temperature).state;  // Set Temp
              uint8_t checksum = (0xAA + 0x55 + 0x0C + 0x22 + 0x04 + temp + 0x00) +1 % 256 ; // Calc checksum
              return {0xAA, 0x55, 0x0C, 0x22, 0x04, temp, 0x00, checksum};


  - platform: template
    name: "Heater LEVEL"
    id: heater_level
    min_value: 0
    max_value: 10
    step: 1
    unit_of_measurement: "Level"
    icon: "mdi:format-list-numbered"
    optimistic: true
    set_action:
      then:
        # Set Level mode
        - ble_client.ble_write:
            service_uuid: '0000FFE0-0000-1000-8000-00805F9B34FB'
            characteristic_uuid: '0000FFE1-0000-1000-8000-00805F9B34FB'
            value: [0xAA, 0x55, 0x0C, 0x22, 0x02, 0x01, 0x00, 0x31]

        - delay: 1s

        # Send Level
        - ble_client.ble_write:
            service_uuid: '0000FFE0-0000-1000-8000-00805F9B34FB'
            characteristic_uuid: '0000FFE1-0000-1000-8000-00805F9B34FB'
            value: !lambda |-
              uint8_t level = (uint8_t)id(heater_level).state;  // Set Level
              uint8_t checksum = (0xAA + 0x55 + 0x0C + 0x22 + 0x04 + level + 0x00) +1 % 256 ; // Calc checksum
              return {0xAA, 0x55, 0x0C, 0x22, 0x04, level, 0x00, checksum};

button:
  - platform: restart
    id: restart_button
    name: Diesel Heater ESP Restart
    entity_category: diagnostic
    disabled_by_default: false
    device_class: restart
